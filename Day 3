Question: Move Zeroes
Link: https://leetcode.com/problems/move-zeroes/description/
Code:
class Solution {
    public void moveZeroes(int[] nums) {
        int k = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != 0) {
                nums[k] = nums[i];
                if (i != k) nums[i] = 0;
                k++;
            }
        }
    }
}


Question: Best Time to Buy and Sell Stock
Link: https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/
Code:
class Solution {
    public int maxProfit(int[] prices) {
        // Brute Force
        // int max = 0;
        // for (int i = 0; i < prices.length - 1; i++) {
        //     for (int j = i + 1; j < prices.length; j++) {
        //         if (prices[j] - prices[i] > max) max = prices[j] - prices[i];
        //     }
        // }
        // return max;
        int buy = prices[0], profit = 0;
        for (int i = 1; i < prices.length; i++) {
            if (prices[i] < buy) buy = prices[i];
            else if (prices[i] - buy > profit) profit = prices[i] - buy;
        }
        return profit;
    }
}

Question: Two Sum
Link: https://leetcode.com/problems/two-sum/description/
Code:
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] ans = new int[2];
        ans[0] = -1;
        ans[1] = -1;
        // ans = [-1, -1];
        Map<Integer, List<Integer>> hmap = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            if (hmap.containsKey(nums[i])) hmap.get(nums[i]).add(i);
            else {
                List<Integer> list = new ArrayList<>();
                list.add(i);
                hmap.put(nums[i], list);
            }
        }
        for (Integer key: hmap.keySet()) {
            List<Integer> indexList = hmap.get(key);
            int lastEle = indexList.get(indexList.size() - 1);
            indexList.remove(indexList.size() - 1);
            hmap.put(key, indexList);
            if (hmap.containsKey(target-key) && (hmap.get(target-key)).size()>0) {
                ans[0] = lastEle;
                ans[1] = hmap.get(target - key).get(0);
                return ans;
            }
        }
        return ans;
    }
}
